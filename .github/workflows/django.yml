name: Django CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  install:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4.1.5
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Set environment variables
        run: echo "DJANGO_ENV=ci" >> $GITHUB_ENV
      - name: Load environment variables from .env file
        run: |
          if [ -f .env ]; then
            set -o allexport
            source .env
            set +o allexport
          fi

  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    needs: install
    steps:
      - uses: actions/checkout@v4.1.5
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cached dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}
      - name: Install dependencies
        run: pip install flake8
      - name: Run linter
        run: flake8 .

  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    needs: install
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: django_cms_am
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: toor
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Set PostgreSQL environment variables
        run: |
            echo "DB_NAME=django_cms_am" >> $GITHUB_ENV
            echo "DB_USER=postgres" >> $GITHUB_ENV
            echo "DB_PASSWORD=toor" >> $GITHUB_ENV
            echo "DB_HOST=localhost" >> $GITHUB_ENV
            echo "DB_PORT=5432" >> $GITHUB_ENV
      - name: Run Migrations
        run: python manage.py migrate
      - name: Run Collect static
        run: python manage.py collectstatic --noinput
      - name: Run Tests
        run: python manage.py test

      - name: Install Coverage
        run: pip install coverage
      - name: Run Tests with Coverage
        run: coverage run manage.py test
      - name: Generate Coverage Report
        run: coverage report

      - name: Show Django logs on error
        if: failure()
        run: |
          cat logs/django.log
